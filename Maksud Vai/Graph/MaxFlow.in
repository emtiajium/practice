#include<iostream>
#include<sstream>
#include<string>
#include<cstdlib>
#include<vector>
#include<map>
#include<queue>
#include<stack>
#include<cmath>
#include<cctype>
#include<set>
#include<bitset>
#include<algorithm>

using namespace std;


#define oo          (1<<30)
#define PI          3.141592653589793
#define pi          2*acos(0)
#define ERR         1e-5
#define PRE         1e-8
#define SZ          size()
#define PB          push_back
#define LL          long long
#define ISS         istringstream
#define OSS         ostringstream
#define VS          vector<string>
#define VI          vector<int>
#define VD          vector<double>
#define VLL         vector<long long>
#define SII         set<int>::iterator
#define SI          set<int>
#define mem(a,b)    memset(a,b,sizeof(a))
#define fi(i,a,b)   for(i=a;i<b;i++)
#define fd(i,a,b)   for(i=a;i>b;i--)
#define fii(a,b)    for(i=a;i<b;i++)
#define fdi(a,b)    for(i=a;i>b;i--)
#define fij(a,b)    for(j=a;j<b;j++)
#define fdj(a,b)    for(j=a;j>b;j--)
#define fik(a,b)    for(k=a;k<b;k++)
#define fdk(a,b)    for(k=a;k>b;k--)
#define fil(a,b)    for(l=a;l<b;l++)
#define fdl(a,b)    for(l=a;l>b;l--)
#define ri(i,a)     for(i=0;i<a;i++)
#define rd(i,a)     for(i=a;i>-1;i--)
#define rii(a)      for(i=0;i<a;i++)
#define rdi(a)      for(i=a;i>-1;i--)
#define rij(a)      for(j=0;j<a;j++)
#define rdj(a)      for(j=a;j>-1;j--)
#define rik(a)      for(k=0;k<a;k++)
#define rdk(a)      for(k=a;k>-1;k--)
#define ril(a)      for(l=0;l<a;l++)
#define rdl(a)      for(l=a;i>-1;l--)
#define EQ(a,b)     (fabs(a-b)<ERR)
#define all(a,b,c)  for(int I=0;I<b;I++)    a[I] = c
#define CROSS(a,b,c,d)  ((b.x-a.x)*(d.y-c.y)-(d.x-c.x)*(b.y-a.y))

VI adj[55];
int mat[60][60],s,t,par[60],MM;
typedef struct
{
    char u,v;
    int w;
}E;
E e[750];

bool BFS()
{
    queue<int>q;
    int u,v,i;
    memset(par,-1,sizeof(par));

    par[s]=0;
    q.push(s);

    while(!q.empty())
    {
        u = q.front();  q.pop();


        for(i=0;i<adj[u].size();i++)
            if(par[adj[u][i]]==-1 && mat[u][adj[u][i]] > 0)
            {
                par[adj[u][i]] = u;
                if(adj[u][i]==t)   return true;
                q.push(adj[u][i]);
            }
    }
    return false;
}

void MR(int ss)
{
    MM = min(mat[par[ss]][ss] , MM);

    if(par[ss] != s)
        MR(par[ss]);

    mat[ss][par[ss]] += MM;
    mat[par[ss]][ss] -=MM;
}

int FLOW()
{
    int flow=0;

    while(BFS())
    {
        MM = 20000000;
        MR(t);

        flow += MM;
    }
    return flow;
}

int main(){
    //freopen("in.in","r",stdin);
    //freopen("out.out","w",stdout);
    int i,j,k,edg;
    char a[12],b[12];
    map<char,int>M;

    while(scanf("%d",&edg)==1)
    {
        M.clear();
        k=1;

        for(i=0;i<edg;i++)
        {
            scanf("%s%s%d",a,b,&e[i].w);
            if(!M[a[0]])
                M[a[0]] = k++;
            if(!M[b[0]])
                M[b[0]] = k++;
            e[i].u = M[a[0]];
            e[i].v = M[b[0]];
        }
        for(i=1;i<=k;i++)
        {
            for(j=1;j<=k;j++)   mat[i][j] = 0;
            adj[i].clear();
        }
        for(i=0;i<edg;i++)
        {
            adj[ e[i].u ].push_back( e[i].v );
            mat[e[i].u][e[i].v] += e[i].w;
        }
        s = M['A'];
        t = M['Z'];
        printf("%d\n",FLOW());
    }

    return 0;
}
