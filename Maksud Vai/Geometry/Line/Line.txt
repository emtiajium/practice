
typedef struct {double a,b,c;}L;
typedef struct {double x,y;}P;


L MakeLine(P p1,P p2)
{
    L re;
    re.a = p1.y-p2.y;
    re.b = p2.x-p1.x;
    re.c = p1.x*p2.y - p2.x*p1.y ;
    return re;
}

L ParallelLine(L l,P p)
{
    L re;
    re.a=l.b;
    re.b=-l.a;
    re.c=-re.a*p.x-re.b*p.y;

    return re;
}

P Intersection(L l1,L l2)
{
    P p;
    p.x  = (l1.b*l2.c-l2.b*l1.c)/(l1.a*l2.b-l2.a*l1.b);
    p.y  = (l2.a*l1.c-l2.c*l1.a)/(l1.a*l2.b-l2.a*l1.b);
    return p;
}

int Number_of_IntersectionPoint(L l1,L l2)
{
	// 	-1 means same line
		0 means parellal
		1 means there is an intersection point.
    
    if(l1.a == 0 && l1.b == 0 && l1.c != 0) return 0;
    if(l2.a == 0 && l2.b == 0 && l2.c != 0) return 0;
    if(l1.a == 0 && l1.b == 0) return -1;
    if(l2.a == 0 && l2.b == 0) return -1;
    if(l1.a * l2.b != l2.a * l1.b) return 1;
    if(l1.a * l2.c == l1.c * l2.a && l1.b * l2.c == l1.c * l2.b) return -1;
    return 0;
}